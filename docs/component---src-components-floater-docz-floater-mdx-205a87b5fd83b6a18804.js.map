{"version":3,"sources":["webpack:///../src/components/floater/docz/Floater.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Floater","Button","ButtonContainer","Container","ThemeContainer","React","buttonRef","setRef","open","setOpen","handleClick","handleRef","node","onClick","ref","anchorElement","position","hasMountedFloater","setHasMountedFloater","setAnchorElement","floaterPosition","setFloaterPosition","handleButtonClick","e","element","target","style","display","width","animationProps","initial","opacity","animate","exit","layout","matchAnchorWidth","of","isMDXComponent"],"mappings":"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","file":"component---src-components-floater-docz-floater-mdx-205a87b5fd83b6a18804.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/linli.tian/awn/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Floater } from '../Floater';\nimport { Button } from '../../button/Button';\nimport { ButtonContainer, Container } from './Floater.docz';\nimport { ThemeContainer } from '../../../../docz/components';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"floater\"\n    }}>{`Floater`}</h1>\n    <p>{`Floaters all users to display information with respect to an anchor point`}</p>\n    <h2 {...{\n      \"id\": \"simple\"\n    }}>{`Simple`}</h2>\n    <p>{`Add a simple floater to any anchor point using a `}<inlineCode parentName=\"p\">{`ref`}</inlineCode>{`.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [buttonRef, setRef] = React.useState(null)\\n  const [open, setOpen] = React.useState(false)\\n  const handleClick = React.useCallback(() => {\\n    if (open) {\\n      setOpen(false)\\n    } else {\\n      setOpen(true)\\n    }\\n  }, [setOpen, open])\\n  const handleRef = React.useCallback(\\n    node => {\\n      setRef(node)\\n    },\\n    [setRef],\\n  )\\n  return (\\n    <ThemeContainer>\\n      <React.Fragment>\\n        <Button onClick={handleClick} ref={handleRef}>\\n          {open ? \\'Hide\\' : \\'Show\\'}\\n        </Button>\\n        <Floater\\n          anchorElement={buttonRef}\\n          position={[\\'bc\\', \\'tc\\']}\\n          open={open && buttonRef !== null}\\n        >\\n          I am the content\\n        </Floater>\\n      </React.Fragment>\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Floater,\n      Button,\n      ButtonContainer,\n      Container,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [buttonRef, setRef] = React.useState(null);\n        const [open, setOpen] = React.useState(false);\n        const handleClick = React.useCallback(() => {\n          if (open) {\n            setOpen(false);\n          } else {\n            setOpen(true);\n          }\n        }, [setOpen, open]);\n        const handleRef = React.useCallback(node => {\n          setRef(node);\n        }, [setRef]);\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <React.Fragment>\n          <Button onClick={handleClick} ref={handleRef} mdxType=\"Button\">\n            {open ? 'Hide' : 'Show'}\n          </Button>\n          <Floater anchorElement={buttonRef} position={['bc', 'tc']} open={open && buttonRef !== null} mdxType=\"Floater\">\n            I am the content\n          </Floater>\n        </React.Fragment>\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"complex\"\n    }}>{`Complex`}</h2>\n    <p>{`A floater can \"float\" around the screen, simply by change the anchor point. The target anchor can be retrieved from the `}<inlineCode parentName=\"p\">{`click`}</inlineCode>{` event on the button.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [hasMountedFloater, setHasMountedFloater] = React.useState(false)\\n  const [anchorElement, setAnchorElement] = React.useState(null)\\n  const [floaterPosition, setFloaterPosition] = React.useState([\\'bc\\', \\'tc\\'])\\n  const handleButtonClick = (e, position) => {\\n    const element = e.target\\n    if (element === anchorElement) {\\n      setAnchorElement(null)\\n      setHasMountedFloater(false)\\n    } else if (anchorElement) {\\n      setAnchorElement(element)\\n      setFloaterPosition(position)\\n      setHasMountedFloater(true)\\n    } else {\\n      setAnchorElement(element)\\n      setFloaterPosition(position)\\n    }\\n  }\\n  return (\\n    <ThemeContainer>\\n      <ButtonContainer>\\n        <Button onClick={e => handleButtonClick(e, [\\'tc\\', \\'bc\\'])}>\\n          Move to Top\\n        </Button>\\n        <span style={{ display: \\'inline-block\\', width: \\'20px\\' }} />\\n        <Button onClick={e => handleButtonClick(e, [\\'bc\\', \\'tc\\'])}>\\n          Move to Bottom\\n        </Button>\\n        <span style={{ display: \\'inline-block\\', width: \\'20px\\' }} />\\n        <Button onClick={e => handleButtonClick(e, [\\'cr\\', \\'cl\\'])}>\\n          Move to Right\\n        </Button>\\n      </ButtonContainer>\\n      <Floater\\n        position={floaterPosition}\\n        anchorElement={anchorElement}\\n        open={anchorElement !== null}\\n        animationProps={{\\n          initial: { opacity: 0 },\\n          animate: { opacity: 1 },\\n          exit: { opacity: 0 },\\n          layout: hasMountedFloater,\\n        }}\\n        matchAnchorWidth\\n      >\\n        <Container />\\n      </Floater>\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Floater,\n      Button,\n      ButtonContainer,\n      Container,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [hasMountedFloater, setHasMountedFloater] = React.useState(false);\n        const [anchorElement, setAnchorElement] = React.useState(null);\n        const [floaterPosition, setFloaterPosition] = React.useState(['bc', 'tc']);\n\n        const handleButtonClick = (e, position) => {\n          const element = e.target;\n\n          if (element === anchorElement) {\n            setAnchorElement(null);\n            setHasMountedFloater(false);\n          } else if (anchorElement) {\n            setAnchorElement(element);\n            setFloaterPosition(position);\n            setHasMountedFloater(true);\n          } else {\n            setAnchorElement(element);\n            setFloaterPosition(position);\n          }\n        };\n\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n          <ButtonContainer mdxType=\"ButtonContainer\">\n              <Button onClick={e => handleButtonClick(e, ['tc', 'bc'])} mdxType=\"Button\">\n                Move to Top\n              </Button>\n              <span style={{\n              display: 'inline-block',\n              width: '20px'\n            }} />\n              <Button onClick={e => handleButtonClick(e, ['bc', 'tc'])} mdxType=\"Button\">\n                Move to Bottom\n              </Button>\n              <span style={{\n              display: 'inline-block',\n              width: '20px'\n            }} />\n              <Button onClick={e => handleButtonClick(e, ['cr', 'cl'])} mdxType=\"Button\">\n                Move to Right\n              </Button>\n            </ButtonContainer>\n            <Floater position={floaterPosition} anchorElement={anchorElement} open={anchorElement !== null} animationProps={{\n            initial: {\n              opacity: 0\n            },\n            animate: {\n              opacity: 1\n            },\n            exit: {\n              opacity: 0\n            },\n            layout: hasMountedFloater\n          }} matchAnchorWidth mdxType=\"Floater\">\n              <Container mdxType=\"Container\" />\n            </Floater>\n        </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"floater-props\"\n    }}>{`Floater Props`}</h2>\n    <Props of={Floater} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}