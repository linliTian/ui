{"version":3,"sources":["webpack:///../src/components/table/docz/Table.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Table","Button","Actions","Column","ButtonSpacer","IconSpacer","ThemeContainer","React","selectedRow","setSelectedRow","columns","key","dataIndex","title","width","render","age","record","justify","onClick","_","name","data","address","dataUniqueKey","onRow","selectedRowKey","parentName","tableData","setTableData","sortable","handleSort","column","state","newData","sort","b","a","localeCompare","reverse","sortNumerical","onSort","emptyComponent","loading","setLoading","fetchData","setTimeout","of","isMDXComponent"],"mappings":"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","file":"component---src-components-table-docz-table-mdx-6ba4feea8e80d0bd6bd3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/linli.tian/awn/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Table } from '../Table';\nimport { Button } from '../../button/Button';\nimport { Actions, Column, ButtonSpacer, IconSpacer } from './Table.docz';\nimport { ThemeContainer } from '../../../../docz/components';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"table\"\n    }}>{`Table`}</h1>\n    <p>{`Use this component to store data and sort data in a tabular format.`}</p>\n    <h2 {...{\n      \"id\": \"simple\"\n    }}>{`Simple`}</h2>\n    <p>{`Store data in a table by providing the columns and the data to store.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [selectedRow, setSelectedRow] = React.useState()\\n  const data = [\\n    {\\n      name: \\'John Brown\\',\\n      age: 61,\\n      address: \\'British Columbia No. 1 Lake Park\\',\\n    },\\n    {\\n      name: \\'Jim Green\\',\\n      age: 70,\\n      address: \\'Ontario No. 1 Lake Park\\',\\n    },\\n    {\\n      name: \\'Joe Flack\\',\\n      age: 40,\\n      address: \\'Winnepeg No. 1 Lake Park\\',\\n    },\\n  ]\\n  const columns = [\\n    {\\n      key: \\'name\\',\\n      dataIndex: \\'name\\',\\n      title: \\'Name\\',\\n      width: 15,\\n    },\\n    {\\n      key: \\'age\\',\\n      title: \\'Age\\',\\n      render: ({ record: { age } }) => (\\n        <span>\\n          <b>{age}</b> y/o\\n        </span>\\n      ),\\n      width: 15,\\n      justify: \\'center\\',\\n    },\\n    {\\n      key: \\'address\\',\\n      dataIndex: \\'address\\',\\n      title: \\'Address\\',\\n    },\\n    {\\n      key: \\'actions\\',\\n      title: \\'Actions\\',\\n      render: () => <Actions />,\\n      width: 5,\\n      justify: \\'flex-end\\',\\n    },\\n  ]\\n  const onClick = React.useCallback((_, record) => {\\n    setSelectedRow(record.name)\\n  }, [])\\n  return (\\n    <ThemeContainer>\\n      <Table\\n        data={data}\\n        dataUniqueKey={\\'name\\'}\\n        columns={columns}\\n        onRow={{ onClick }}\\n        selectedRowKey={selectedRow}\\n      />\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Table,\n      Button,\n      Actions,\n      Column,\n      ButtonSpacer,\n      IconSpacer,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [selectedRow, setSelectedRow] = React.useState();\n        const data = [{\n          name: 'John Brown',\n          age: 61,\n          address: 'British Columbia No. 1 Lake Park'\n        }, {\n          name: 'Jim Green',\n          age: 70,\n          address: 'Ontario No. 1 Lake Park'\n        }, {\n          name: 'Joe Flack',\n          age: 40,\n          address: 'Winnepeg No. 1 Lake Park'\n        }];\n        const columns = [{\n          key: 'name',\n          dataIndex: 'name',\n          title: 'Name',\n          width: 15\n        }, {\n          key: 'age',\n          title: 'Age',\n          render: ({\n            record: {\n              age\n            }\n          }) => <span>\n            <b>{age}</b> y/o\n          </span>,\n          width: 15,\n          justify: 'center'\n        }, {\n          key: 'address',\n          dataIndex: 'address',\n          title: 'Address'\n        }, {\n          key: 'actions',\n          title: 'Actions',\n          render: () => <Actions mdxType=\"Actions\" />,\n          width: 5,\n          justify: 'flex-end'\n        }];\n        const onClick = React.useCallback((_, record) => {\n          setSelectedRow(record.name);\n        }, []);\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <Table data={data} dataUniqueKey={'name'} columns={columns} onRow={{\n            onClick\n          }} selectedRowKey={selectedRow} mdxType=\"Table\" />\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"sort-by-column\"\n    }}>{`Sort by Column`}</h2>\n    <p>{`Sort data per column be setting the `}<inlineCode parentName=\"p\">{`sortable`}</inlineCode>{` column prop to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` and handling the `}<inlineCode parentName=\"p\">{`onSort`}</inlineCode>{` callback. When a sortable column header is clicked, the `}<inlineCode parentName=\"p\">{`onSort`}</inlineCode>{` callback will be called with the column `}<inlineCode parentName=\"p\">{`key`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`state`}</inlineCode>{`. This allows for the data to be sorted then passed back into the table for rerendering.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [tableData, setTableData] = React.useState([\\n    {\\n      key: \\'1\\',\\n      name: \\'John Brown\\',\\n      age: 61,\\n      address: \\'British Columbia No. 1 Lake Park\\',\\n    },\\n    {\\n      key: \\'2\\',\\n      name: \\'Jim Green\\',\\n      age: 70,\\n      address: \\'Ontario No. 1 Lake Park\\',\\n    },\\n    {\\n      key: \\'3\\',\\n      name: \\'Joe Flack\\',\\n      age: 40,\\n      address: \\'Winnepeg No. 1 Lake Park\\',\\n    },\\n  ])\\n  const columns = [\\n    {\\n      key: \\'name\\',\\n      dataIndex: \\'name\\',\\n      title: \\'Name\\',\\n      width: 15,\\n      sortable: true,\\n    },\\n    {\\n      key: \\'age\\',\\n      dataIndex: \\'age\\',\\n      title: \\'Age\\',\\n      width: 15,\\n      justify: \\'center\\',\\n      sortable: true,\\n    },\\n    {\\n      key: \\'address\\',\\n      dataIndex: \\'address\\',\\n      title: \\'Address\\',\\n    },\\n    {\\n      key: \\'actions\\',\\n      title: \\'Actions\\',\\n      render: () => <Actions />,\\n      width: 5,\\n      justify: \\'flex-end\\',\\n    },\\n  ]\\n  const sortAlpabetical = reverse => {\\n    if (reverse) {\\n      return tableData.sort((b, a) => {\\n        return a.name.localeCompare(b.name)\\n      })\\n    }\\n    return tableData.sort((a, b) => {\\n      return a.name.localeCompare(b.name)\\n    })\\n  }\\n  const sortNumerical = reverse => {\\n    if (reverse) {\\n      return tableData.sort((a, b) => b.age - a.age)\\n    }\\n    return tableData.sort((a, b) => a.age - b.age)\\n  }\\n  const handleSort = React.useCallback(\\n    (column, state) => {\\n      switch (column) {\\n        case \\'name\\': {\\n          const newData = sortAlpabetical(state === \\'dsc\\')\\n          setTableData([...newData])\\n          break\\n        }\\n        case \\'age\\': {\\n          const newData = sortNumerical(state === \\'dsc\\')\\n          setTableData([...newData])\\n          break\\n        }\\n      }\\n    },\\n    [tableData, setTableData],\\n  )\\n  return (\\n    <ThemeContainer>\\n      <Table\\n        dataUniqueKey={\\'name\\'}\\n        data={tableData}\\n        columns={columns}\\n        onSort={handleSort}\\n      />\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Table,\n      Button,\n      Actions,\n      Column,\n      ButtonSpacer,\n      IconSpacer,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [tableData, setTableData] = React.useState([{\n          key: '1',\n          name: 'John Brown',\n          age: 61,\n          address: 'British Columbia No. 1 Lake Park'\n        }, {\n          key: '2',\n          name: 'Jim Green',\n          age: 70,\n          address: 'Ontario No. 1 Lake Park'\n        }, {\n          key: '3',\n          name: 'Joe Flack',\n          age: 40,\n          address: 'Winnepeg No. 1 Lake Park'\n        }]);\n        const columns = [{\n          key: 'name',\n          dataIndex: 'name',\n          title: 'Name',\n          width: 15,\n          sortable: true\n        }, {\n          key: 'age',\n          dataIndex: 'age',\n          title: 'Age',\n          width: 15,\n          justify: 'center',\n          sortable: true\n        }, {\n          key: 'address',\n          dataIndex: 'address',\n          title: 'Address'\n        }, {\n          key: 'actions',\n          title: 'Actions',\n          render: () => <Actions mdxType=\"Actions\" />,\n          width: 5,\n          justify: 'flex-end'\n        }];\n\n        const sortAlpabetical = reverse => {\n          if (reverse) {\n            return tableData.sort((b, a) => {\n              return a.name.localeCompare(b.name);\n            });\n          }\n\n          return tableData.sort((a, b) => {\n            return a.name.localeCompare(b.name);\n          });\n        };\n\n        const sortNumerical = reverse => {\n          if (reverse) {\n            return tableData.sort((a, b) => b.age - a.age);\n          }\n\n          return tableData.sort((a, b) => a.age - b.age);\n        };\n\n        const handleSort = React.useCallback((column, state) => {\n          switch (column) {\n            case 'name':\n              {\n                const newData = sortAlpabetical(state === 'dsc');\n                setTableData([...newData]);\n                break;\n              }\n\n            case 'age':\n              {\n                const newData = sortNumerical(state === 'dsc');\n                setTableData([...newData]);\n                break;\n              }\n          }\n        }, [tableData, setTableData]);\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <Table dataUniqueKey={'name'} data={tableData} columns={columns} onSort={handleSort} mdxType=\"Table\" />\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"empty-state\"\n    }}>{`Empty State`}</h2>\n    <p>{`If there is no data supplied to the table, provide a custom empty state component to provide the user more feedback.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const columns = [\\n    {\\n      key: \\'name\\',\\n      dataIndex: \\'name\\',\\n      title: \\'Name\\',\\n      width: 15,\\n      sortable: true,\\n    },\\n    {\\n      key: \\'age\\',\\n      dataIndex: \\'age\\',\\n      title: \\'Age\\',\\n      width: 15,\\n      justify: \\'center\\',\\n      sortable: true,\\n    },\\n    {\\n      key: \\'address\\',\\n      dataIndex: \\'address\\',\\n      title: \\'Address\\',\\n    },\\n    {\\n      key: \\'actions\\',\\n      title: \\'Actions\\',\\n      render: () => <Actions />,\\n      width: 5,\\n      justify: \\'flex-end\\',\\n    },\\n  ]\\n  return (\\n    <ThemeContainer>\\n      <Table\\n        data={[]}\\n        dataUniqueKey={\\'name\\'}\\n        columns={columns}\\n        emptyComponent={<div>It appears you have no users.</div>}\\n      />\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Table,\n      Button,\n      Actions,\n      Column,\n      ButtonSpacer,\n      IconSpacer,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const columns = [{\n          key: 'name',\n          dataIndex: 'name',\n          title: 'Name',\n          width: 15,\n          sortable: true\n        }, {\n          key: 'age',\n          dataIndex: 'age',\n          title: 'Age',\n          width: 15,\n          justify: 'center',\n          sortable: true\n        }, {\n          key: 'address',\n          dataIndex: 'address',\n          title: 'Address'\n        }, {\n          key: 'actions',\n          title: 'Actions',\n          render: () => <Actions mdxType=\"Actions\" />,\n          width: 5,\n          justify: 'flex-end'\n        }];\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <Table data={[]} dataUniqueKey={'name'} columns={columns} emptyComponent={<div>It appears you have no users.</div>} mdxType=\"Table\" />\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"loading-state\"\n    }}>{`Loading State`}</h2>\n    <p>{`If data is asynchronously loading, set the `}<inlineCode parentName=\"p\">{`loading`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{` in order to provide the user feedback.`}</p>\n    <Playground __position={3} __code={'() => {\\n  const [loading, setLoading] = React.useState(false)\\n  const fetchData = React.useCallback(() => {\\n    setLoading(true)\\n    setTimeout(() => {\\n      setLoading(false)\\n    }, 2000)\\n  }, [])\\n  const [tableData, setTableData] = React.useState([\\n    {\\n      key: \\'1\\',\\n      name: \\'John Brown\\',\\n      age: 61,\\n      address: \\'British Columbia No. 1 Lake Park\\',\\n    },\\n    {\\n      key: \\'2\\',\\n      name: \\'Jim Green\\',\\n      age: 70,\\n      address: \\'Ontario No. 1 Lake Park\\',\\n    },\\n    {\\n      key: \\'3\\',\\n      name: \\'Joe Flack\\',\\n      age: 40,\\n      address: \\'Winnepeg No. 1 Lake Park\\',\\n    },\\n  ])\\n  const columns = [\\n    {\\n      key: \\'name\\',\\n      dataIndex: \\'name\\',\\n      title: \\'Name\\',\\n      width: 15,\\n    },\\n    {\\n      key: \\'age\\',\\n      dataIndex: \\'age\\',\\n      title: \\'Age\\',\\n      width: 15,\\n      justify: \\'center\\',\\n    },\\n    {\\n      key: \\'address\\',\\n      dataIndex: \\'address\\',\\n      title: \\'Address\\',\\n    },\\n    {\\n      key: \\'actions\\',\\n      title: \\'Actions\\',\\n      render: () => <Actions />,\\n      width: 5,\\n      justify: \\'flex-end\\',\\n    },\\n  ]\\n  return (\\n    <ThemeContainer>\\n      <React.Fragment>\\n        <Button loading={loading} onClick={fetchData}>\\n          Fetch Data\\n        </Button>\\n        <ButtonSpacer />\\n        <Table\\n          dataUniqueKey={\\'name\\'}\\n          data={tableData}\\n          columns={columns}\\n          loading={loading}\\n        />\\n      </React.Fragment>\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Table,\n      Button,\n      Actions,\n      Column,\n      ButtonSpacer,\n      IconSpacer,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [loading, setLoading] = React.useState(false);\n        const fetchData = React.useCallback(() => {\n          setLoading(true);\n          setTimeout(() => {\n            setLoading(false);\n          }, 2000);\n        }, []);\n        const [tableData, setTableData] = React.useState([{\n          key: '1',\n          name: 'John Brown',\n          age: 61,\n          address: 'British Columbia No. 1 Lake Park'\n        }, {\n          key: '2',\n          name: 'Jim Green',\n          age: 70,\n          address: 'Ontario No. 1 Lake Park'\n        }, {\n          key: '3',\n          name: 'Joe Flack',\n          age: 40,\n          address: 'Winnepeg No. 1 Lake Park'\n        }]);\n        const columns = [{\n          key: 'name',\n          dataIndex: 'name',\n          title: 'Name',\n          width: 15\n        }, {\n          key: 'age',\n          dataIndex: 'age',\n          title: 'Age',\n          width: 15,\n          justify: 'center'\n        }, {\n          key: 'address',\n          dataIndex: 'address',\n          title: 'Address'\n        }, {\n          key: 'actions',\n          title: 'Actions',\n          render: () => <Actions mdxType=\"Actions\" />,\n          width: 5,\n          justify: 'flex-end'\n        }];\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <React.Fragment>\n          <Button loading={loading} onClick={fetchData} mdxType=\"Button\">\n            Fetch Data\n          </Button>\n          <ButtonSpacer mdxType=\"ButtonSpacer\" />\n          <Table dataUniqueKey={'name'} data={tableData} columns={columns} loading={loading} mdxType=\"Table\" />\n        </React.Fragment>\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"table-props\"\n    }}>{`Table Props`}</h2>\n    <Props of={Table} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"column-props\"\n    }}>{`Column Props`}</h2>\n    <Props of={Column} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}