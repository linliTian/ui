{"version":3,"sources":["webpack:///../src/components/tooltip/docz/Tooltip.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","Tooltip","Current","positions","Overlay","Spacer","Menu","Button","ThemeContainer","React","index","setPositionIndex","handleClick","length","position","placement","overlay","onClick","ghost","visible","setVisible","key","console","log","defaultSelectedItem","Item","itemKey","of","isMDXComponent"],"mappings":"gUAcaA,G,UAAe,S,yNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,QAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,WADR,WAGA,kFACA,iBAAQ,CACN,GAAM,UADR,UAGA,iHAAgG,0BAAYC,WAAW,KAAvB,aAAhG,UACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,opBAAqpBC,SAAO,GAC7rBL,QACAH,kBACAS,eACAC,UACAC,YACAC,YACAC,cACAC,YACAC,WACAC,SACAC,WACAC,oBAZ6rB,gBAa7rBlB,IAb6rB,EAc7rBH,eAd6rB,GAe5rBO,QAAQ,eACR,WAAM,MAC6Be,WAAe,GAA1CC,EADF,KACSC,EADT,KAECC,EAAcH,eAAkB,WAChCC,IAAUP,IAAUU,OAAS,EAC/BF,EAAiB,GAEjBA,EAAiBD,EAAQ,KAE1B,CAACA,IACEI,EAAWX,IAAUO,GAC3B,OAAO,YAAC,IAAD,CAAgBhB,QAAQ,kBAC/B,YAAC,WAAD,KACE,YAAC,IAAD,CAASqB,UAAWD,EAAUE,QAAS,YAAC,IAAD,CAAStB,QAAQ,YAAcA,QAAQ,WAC5E,YAAC,IAAD,CAAQuB,QAASL,EAAaM,OAAK,EAACxB,QAAQ,UAA5C,6BAIF,YAAC,IAAD,CAASA,QAAQ,WAAjB,qBAA8CS,IAAUO,SAK9D,iBAAQ,CACN,GAAM,qBADR,qBAGA,0EAAyD,0BAAYf,WAAW,KAAvB,WAAzD,UACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,kpBAAypBC,SAAO,GACjsBL,QACAH,kBACAS,eACAC,UACAC,YACAC,YACAC,cACAC,YACAC,WACAC,SACAC,WACAC,oBAZisB,gBAajsBlB,IAbisB,EAcjsBH,eAdisB,GAehsBO,QAAQ,eACR,WAAM,MACyBe,YAAe,GAAtCU,EADF,KACWC,EADX,KAECJ,EAAU,YAAC,IAAD,CAAMC,QAAS,SAAAI,GAAG,OAAIC,QAAQC,IAAIF,IAAMG,oBAAoB,IAAI9B,QAAQ,QACxF,YAAC,IAAK+B,KAAN,CAAWC,QAAQ,KAAnB,UACA,YAAC,IAAKD,KAAN,CAAWC,QAAQ,KAAnB,WAEA,OAAO,YAAC,IAAD,CAAgBhC,QAAQ,kBAC/B,YAAC,WAAD,KACE,YAAC,IAAD,CAAQuB,QAAS,kBAAMG,GAAYD,IAAUzB,QAAQ,UAArD,yBAGA,YAAC,IAAD,CAAQA,QAAQ,WAChB,YAAC,IAAD,CAASqB,UAAW,SAAUC,QAASA,EAASG,QAASA,EAASzB,QAAQ,WACxE,YAAC,IAAD,CAAQwB,OAAK,EAACxB,QAAQ,UAAtB,sBAMR,iBAAQ,CACN,GAAM,iBADR,iBAGA,YAAC,IAAD,CAAOiC,GAAI1B,IAASP,QAAQ,gB,uNAKhCH,EAAWqC,gBAAiB","file":"component---src-components-tooltip-docz-tooltip-mdx-a25632a5ef3c95e75211.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/linli.tian/awn/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Tooltip } from '../Tooltip';\nimport { Current, positions, Overlay, Spacer } from './Tooltip.docz';\nimport { Menu } from '../../menu/Menu';\nimport { Button } from '../../button/Button';\nimport { ThemeContainer } from '../../../../docz/components';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"tooltip\"\n    }}>{`Tooltip`}</h1>\n    <p>{`Used to reveal extra guidance or information to the user.`}</p>\n    <h2 {...{\n      \"id\": \"simple\"\n    }}>{`Simple`}</h2>\n    <p>{`Change the placement of the tooltip with respect to the anchor position by modifying the `}<inlineCode parentName=\"p\">{`placement`}</inlineCode>{` prop.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [index, setPositionIndex] = React.useState(0)\\n  const handleClick = React.useCallback(() => {\\n    if (index === positions.length - 1) {\\n      setPositionIndex(0)\\n    } else {\\n      setPositionIndex(index + 1)\\n    }\\n  }, [index])\\n  const position = positions[index]\\n  return (\\n    <ThemeContainer>\\n      <React.Fragment>\\n        <Tooltip placement={position} overlay={<Overlay />}>\\n          <Button onClick={handleClick} ghost>\\n            Click to Change Position\\n          </Button>\\n        </Tooltip>\\n        <Current>Current Position: {positions[index]}</Current>\\n      </React.Fragment>\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Tooltip,\n      Current,\n      positions,\n      Overlay,\n      Spacer,\n      Menu,\n      Button,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [index, setPositionIndex] = React.useState(0);\n        const handleClick = React.useCallback(() => {\n          if (index === positions.length - 1) {\n            setPositionIndex(0);\n          } else {\n            setPositionIndex(index + 1);\n          }\n        }, [index]);\n        const position = positions[index];\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <React.Fragment>\n          <Tooltip placement={position} overlay={<Overlay mdxType=\"Overlay\" />} mdxType=\"Tooltip\">\n            <Button onClick={handleClick} ghost mdxType=\"Button\">\n              Click to Change Position\n            </Button>\n          </Tooltip>\n          <Current mdxType=\"Current\">Current Position: {positions[index]}</Current>\n        </React.Fragment>\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"custom-visibility\"\n    }}>{`Custom Visibility`}</h2>\n    <p>{`Customize how a tooltip is shown by modifying the `}<inlineCode parentName=\"p\">{`visible`}</inlineCode>{` prop.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [visible, setVisible] = React.useState(false)\\n  const overlay = (\\n    <Menu onClick={key => console.log(key)} defaultSelectedItem=\\\"1\\\">\\n      <Menu.Item itemKey=\\\"1\\\">Item 1</Menu.Item>\\n      <Menu.Item itemKey=\\\"2\\\">Item 2</Menu.Item>\\n    </Menu>\\n  )\\n  return (\\n    <ThemeContainer>\\n      <React.Fragment>\\n        <Button onClick={() => setVisible(!visible)}>\\n          Click to Show Tooltip\\n        </Button>\\n        <Spacer />\\n        <Tooltip placement={\\'bottom\\'} overlay={overlay} visible={visible}>\\n          <Button ghost>Tooltip Here</Button>\\n        </Tooltip>\\n      </React.Fragment>\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Tooltip,\n      Current,\n      positions,\n      Overlay,\n      Spacer,\n      Menu,\n      Button,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [visible, setVisible] = React.useState(false);\n        const overlay = <Menu onClick={key => console.log(key)} defaultSelectedItem=\"1\" mdxType=\"Menu\">\n        <Menu.Item itemKey=\"1\">Item 1</Menu.Item>\n        <Menu.Item itemKey=\"2\">Item 2</Menu.Item>\n      </Menu>;\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <React.Fragment>\n          <Button onClick={() => setVisible(!visible)} mdxType=\"Button\">\n            Click to Show Tooltip\n          </Button>\n          <Spacer mdxType=\"Spacer\" />\n          <Tooltip placement={'bottom'} overlay={overlay} visible={visible} mdxType=\"Tooltip\">\n            <Button ghost mdxType=\"Button\">Tooltip Here</Button>\n          </Tooltip>\n        </React.Fragment>\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"tooltip-props\"\n    }}>{`Tooltip Props`}</h2>\n    <Props of={Tooltip} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}