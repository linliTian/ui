{"version":3,"sources":["webpack:///../src/hooks/hooks.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"wPAQaA,G,UAAe,S,qMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,0BADR,0BAGA,2FACA,8BACE,iBAAGC,WAAW,cAAd,qHAAiJ,0BAAYA,WAAW,KAAvB,QAAjJ,KAAuM,0BAAYA,WAAW,KAAvB,YAAvM,mJAEF,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2nB,mMAqCTJ,EAAWK,gBAAiB","file":"component---src-hooks-hooks-mdx-11b014b6f3b61e047047.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/linli.tian/awn/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"useuploadonmounteffect\"\n    }}>{`useUploadOnMountEffect`}</h1>\n    <p>{`Provides any component the ability to upload a file when it mounts`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`This hook is useful for situations where you want to create a component that displays the contents of a file like `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`fileSize`}</inlineCode>{`, etc. But want to upload that file when the component mounts. Use this hook to enrich your component and do all of the heavy lifting for you!`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  import { useUploadOnMountEffect } from \"@rtkwlf/ui\";\n\n  const MyFileComponent = ({ file }) => {\n\n    const onFileUploaded = React.useCallback((itemKey, response) => {\n      console.log(itemKey, response);\n    }, []);\n\n    const {\n      percentUploaded,\n      error\n    } = useUploadOnMountEffect({\n      file,\n      uploadUrl: \"/my-upload-endpoint\"\n      itemKey: \"1\",\n      onFileUploaded,\n      headers: [\n        {\n          header: \"Authorization\",\n          value: \"Bearer <my-token>\"\n        }\n      ]\n    });\n\n    return (\n      <div>\n        <p>{file.name}<p>\n      <div>\n    );\n  };\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}