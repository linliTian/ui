{"version":3,"sources":["webpack:///../src/components/notificationBin/docz/NotificationBin.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","NotificationBin","Button","ThemeContainer","Spacer","React","notifications","setNotifications","notificationComponent","setNotificationComponent","add","currentNotifications","randomNumber","Math","floor","random","newNotifcation","itemKey","title","children","notificationType","remove","key","filter","n","toggleComponent","current","style","display","onClick","onRemove","of","isMDXComponent"],"mappings":"sTAYaA,G,UAAe,S,yOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,yFACA,iBAAQ,CACN,GAAM,UADR,UAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,m+CAAg/CC,SAAO,GACxhDJ,QACAH,kBACAQ,eACAC,UACAC,oBACAC,WACAC,mBACAC,YARwhD,gBASxhDb,IATwhD,EAUxhDH,eAVwhD,GAWvhDO,QAAQ,eACR,WAAM,MACqCU,WAAe,IAAlDC,EADF,KACiBC,EADjB,OAEqDF,WAAe,WAAlEG,EAFF,KAEyBC,EAFzB,KAGCC,EAAML,eAAkB,WAC5BE,GAAiB,SAAAI,GACf,IAAMC,EAAeC,KAAKC,MAAsB,IAAhBD,KAAKE,UAC/BC,EAAiB,CACrBC,QAASL,EACTM,MAAO,iBAAiBN,EACxBO,SAAU,mDACVC,iBAAkB,WAEpB,4BAAWT,GAAX,CAAiCK,SAElC,IACGK,EAAShB,eAAkB,SAAAiB,GAC/Bf,GAAiB,SAAAI,GACf,OAAOA,EAAqBY,QAAO,SAAAC,GAAC,OAAIA,EAAEP,UAAYK,UAEvD,IACGG,EAAkBpB,eAAkB,WACxCI,GAAyB,SAAAiB,GACvB,MAAgB,YAAZA,EACK,MAGF,eAER,IACH,OAAO,YAAC,IAAD,CAAgB/B,QAAQ,kBAC/B,uBACE,mBAAKgC,MAAO,CACRC,QAAS,SAEX,YAAC,IAAD,CAAQC,QAASnB,EAAKf,QAAQ,UAA9B,OACA,YAAC,IAAD,CAAQA,QAAQ,WAChB,YAAC,IAAD,CAAQkC,QAASJ,EAAiB9B,QAAQ,UAA1C,kCAEF,YAAC,IAAD,CAAQA,QAAQ,WAChB,YAAC,IAAD,CAAiBa,sBAAuBA,EAAuBF,cAAeA,EAAewB,SAAUT,EAAQ1B,QAAQ,yBAK7H,iBAAQ,CACN,GAAM,yBADR,yBAGA,YAAC,IAAD,CAAOoC,GAAI9B,IAAiBN,QAAQ,gB,uOAKxCH,EAAWwC,gBAAiB","file":"component---src-components-notification-bin-docz-notification-bin-mdx-3a753cf9afba78ca4334.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/linli.tian/awn/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { NotificationBin } from '../NotificationBin';\nimport { Button } from '../../button/Button';\nimport { ThemeContainer, Spacer } from '../../../../docz/components';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"notificationbin\"\n    }}>{`NotificationBin`}</h1>\n    <p>{`Manages all notifications including enter and exit notifications`}</p>\n    <h2 {...{\n      \"id\": \"simple\"\n    }}>{`Simple`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [notifications, setNotifications] = React.useState([])\\n  const [notificationComponent, setNotificationComponent] = React.useState(\\n    \\'default\\',\\n  )\\n  const add = React.useCallback(() => {\\n    setNotifications(currentNotifications => {\\n      const randomNumber = Math.floor(Math.random() * 999)\\n      const newNotifcation = {\\n        itemKey: randomNumber,\\n        title: `Notification: ${randomNumber}`,\\n        children: <div>This is the description.</div>,\\n        notificationType: \\'success\\',\\n      }\\n      return [...currentNotifications, newNotifcation]\\n    })\\n  }, [])\\n  const remove = React.useCallback(key => {\\n    setNotifications(currentNotifications => {\\n      return currentNotifications.filter(n => n.itemKey !== key)\\n    })\\n  }, [])\\n  const toggleComponent = React.useCallback(() => {\\n    setNotificationComponent(current => {\\n      if (current === \\'default\\') {\\n        return \\'box\\'\\n      }\\n      return \\'default\\'\\n    })\\n  }, [])\\n  return (\\n    <ThemeContainer>\\n      <div>\\n        <div style={{ display: \\'flex\\' }}>\\n          <Button onClick={add}>Add</Button>\\n          <Spacer />\\n          <Button onClick={toggleComponent}>\\n            Toggle Notification Component\\n          </Button>\\n        </div>\\n        <Spacer />\\n        <NotificationBin\\n          notificationComponent={notificationComponent}\\n          notifications={notifications}\\n          onRemove={remove}\\n        />\\n      </div>\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      NotificationBin,\n      Button,\n      ThemeContainer,\n      Spacer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [notifications, setNotifications] = React.useState([]);\n        const [notificationComponent, setNotificationComponent] = React.useState('default');\n        const add = React.useCallback(() => {\n          setNotifications(currentNotifications => {\n            const randomNumber = Math.floor(Math.random() * 999);\n            const newNotifcation = {\n              itemKey: randomNumber,\n              title: `Notification: ${randomNumber}`,\n              children: <div>This is the description.</div>,\n              notificationType: 'success'\n            };\n            return [...currentNotifications, newNotifcation];\n          });\n        }, []);\n        const remove = React.useCallback(key => {\n          setNotifications(currentNotifications => {\n            return currentNotifications.filter(n => n.itemKey !== key);\n          });\n        }, []);\n        const toggleComponent = React.useCallback(() => {\n          setNotificationComponent(current => {\n            if (current === 'default') {\n              return 'box';\n            }\n\n            return 'default';\n          });\n        }, []);\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <div>\n          <div style={{\n              display: 'flex'\n            }}>\n            <Button onClick={add} mdxType=\"Button\">Add</Button>\n            <Spacer mdxType=\"Spacer\" />\n            <Button onClick={toggleComponent} mdxType=\"Button\">Toggle Notification Component</Button>\n          </div>\n          <Spacer mdxType=\"Spacer\" />\n          <NotificationBin notificationComponent={notificationComponent} notifications={notifications} onRemove={remove} mdxType=\"NotificationBin\" />\n        </div>\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"notificationbin-props\"\n    }}>{`NotificationBin Props`}</h2>\n    <Props of={NotificationBin} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}