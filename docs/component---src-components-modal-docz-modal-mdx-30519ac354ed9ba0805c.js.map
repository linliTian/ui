{"version":3,"sources":["webpack:///../src/components/modal/docz/Modal.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Modal","Button","Input","ThemeContainer","React","visible","setVisibility","onCancel","onOk","onClick","title","style","minHeight","label","parentName","footer","ghost","height","width","loading","setLoading","setTimeout","closable","allowKeyboard","cancelButtonProps","disabled","okButtonProps","of","isMDXComponent"],"mappings":"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","file":"component---src-components-modal-docz-modal-mdx-30519ac354ed9ba0805c.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/linli.tian/awn/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Modal } from '../Modal';\nimport { Button } from '../../button/Button';\nimport { Input } from '../../input/Input';\nimport { ThemeContainer } from '../../../../docz/components';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n\n    <h1 {...{\n      \"id\": \"modal\"\n    }}>{`Modal`}</h1>\n    <p>{`Provides interaction with application without changing pages.`}</p>\n    <h2 {...{\n      \"id\": \"simple\"\n    }}>{`Simple`}</h2>\n    <p>{`Many times a simple input is all that is needed.`}</p>\n    <Playground __position={0} __code={'() => {\\n  const [visible, setVisibility] = React.useState(false)\\n  const onCancel = React.useCallback(() => {\\n    setVisibility(false)\\n  }, [])\\n  const onOk = React.useCallback(() => {\\n    setVisibility(false)\\n  }, [])\\n  return (\\n    <ThemeContainer>\\n      <div>\\n        <Button onClick={() => setVisibility(true)}>Open Simple Modal</Button>\\n        <Modal\\n          title={\\'Title\\'}\\n          onOk={onOk}\\n          onCancel={onCancel}\\n          visible={visible}\\n        >\\n          <div style={{ minHeight: \\'200px\\' }}>\\n            <Input label={\\'First Name\\'} />\\n            <Input label={\\'Last Name\\'} />\\n            <Input label={\\'Email\\'} />\\n            <Input label={\\'Password\\'} />\\n          </div>\\n        </Modal>\\n      </div>\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Button,\n      Input,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [visible, setVisibility] = React.useState(false);\n        const onCancel = React.useCallback(() => {\n          setVisibility(false);\n        }, []);\n        const onOk = React.useCallback(() => {\n          setVisibility(false);\n        }, []);\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <div>\n          <Button onClick={() => setVisibility(true)} mdxType=\"Button\">Open Simple Modal</Button>\n          <Modal title={'Title'} onOk={onOk} onCancel={onCancel} visible={visible} mdxType=\"Modal\">\n            <div style={{\n                minHeight: \"200px\"\n              }}>\n              <Input label={'First Name'} mdxType=\"Input\" />\n              <Input label={'Last Name'} mdxType=\"Input\" />\n              <Input label={'Email'} mdxType=\"Input\" />\n              <Input label={'Password'} mdxType=\"Input\" />\n            </div>\n          </Modal>\n        </div>\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"custom-footer\"\n    }}>{`Custom Footer`}</h2>\n    <p>{`Sometimes a custom footer is needed to satisfy specific use cases. Modify the `}<inlineCode parentName=\"p\">{`footer`}</inlineCode>{` prop to create a custom footer.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [visible, setVisibility] = React.useState(false)\\n  const onCancel = React.useCallback(() => {\\n    setVisibility(false)\\n  }, [])\\n  const onOk = React.useCallback(() => {\\n    setVisibility(false)\\n  }, [])\\n  return (\\n    <ThemeContainer>\\n      <div>\\n        <Button onClick={() => setVisibility(true)}>\\n          Open Custom Footer Modal\\n        </Button>\\n        <Modal\\n          title={\\'Title\\'}\\n          onOk={onOk}\\n          onCancel={onCancel}\\n          footer={\\n            <React.Fragment>\\n              <Button onClick={onCancel} ghost>\\n                Cancel\\n              </Button>\\n              <div style={{ height: \\'1px\\', width: \\'16px\\' }} />\\n              <Button onClick={onOk}>Finish</Button>\\n            </React.Fragment>\\n          }\\n          visible={visible}\\n        >\\n          <div style={{ minHeight: \\'200px\\' }}>\\n            <Input label={\\'First Name\\'} />\\n            <Input label={\\'Last Name\\'} />\\n            <Input label={\\'Email\\'} />\\n            <Input label={\\'Password\\'} />\\n          </div>\\n        </Modal>\\n      </div>\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Button,\n      Input,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [visible, setVisibility] = React.useState(false);\n        const onCancel = React.useCallback(() => {\n          setVisibility(false);\n        }, []);\n        const onOk = React.useCallback(() => {\n          setVisibility(false);\n        }, []);\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n        <div>\n          <Button onClick={() => setVisibility(true)} mdxType=\"Button\">\n            Open Custom Footer Modal\n          </Button>\n          <Modal title={'Title'} onOk={onOk} onCancel={onCancel} footer={<React.Fragment>\n                <Button onClick={onCancel} ghost mdxType=\"Button\">\n                  Cancel\n                </Button>\n                <div style={{\n                height: '1px',\n                width: '16px'\n              }} />\n                <Button onClick={onOk} mdxType=\"Button\">Finish</Button>\n              </React.Fragment>} visible={visible} mdxType=\"Modal\">\n            <div style={{\n                minHeight: \"200px\"\n              }}>\n              <Input label={'First Name'} mdxType=\"Input\" />\n              <Input label={'Last Name'} mdxType=\"Input\" />\n              <Input label={'Email'} mdxType=\"Input\" />\n              <Input label={'Password'} mdxType=\"Input\" />\n            </div>\n          </Modal>\n        </div>\n      </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"asynchronous-actions\"\n    }}>{`Asynchronous Actions`}</h2>\n    <p>{`If there is a form in the modal that needs to be saved to the server, modify the `}<inlineCode parentName=\"p\">{`okButtonProps`}</inlineCode>{` to make use of the\nloading state while the form is being submitted. Then automatically close the modal once the request completes. The\nexample below is configured such that the modal will close 3 seconds after the `}<inlineCode parentName=\"p\">{`Okay`}</inlineCode>{` button is clicked. `}</p>\n    <Playground __position={2} __code={'() => {\\n  const [visible, setVisibility] = React.useState(false)\\n  const [loading, setLoading] = React.useState(false)\\n  const onCancel = React.useCallback(() => {\\n    setVisibility(false)\\n  }, [])\\n  const onOk = React.useCallback(() => {\\n    setLoading(true)\\n    setTimeout(() => {\\n      setVisibility(false)\\n      setLoading(false)\\n    }, 3000)\\n  }, [])\\n  return (\\n    <div>\\n      <Button onClick={() => setVisibility(true)}>\\n        Open Modal with Async Logic\\n      </Button>\\n      <Modal\\n        title={\\'Title\\'}\\n        onOk={onOk}\\n        onCancel={onCancel}\\n        closable={!loading}\\n        allowKeyboard={!loading}\\n        cancelButtonProps={{\\n          disabled: loading,\\n        }}\\n        okButtonProps={{\\n          loading,\\n        }}\\n        visible={visible}\\n      >\\n        <div style={{ minHeight: \\'200px\\' }}>\\n          <Input label={\\'First Name\\'} />\\n          <Input label={\\'Last Name\\'} />\\n          <Input label={\\'Email\\'} />\\n          <Input label={\\'Password\\'} />\\n        </div>\\n      </Modal>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Modal,\n      Button,\n      Input,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [visible, setVisibility] = React.useState(false);\n        const [loading, setLoading] = React.useState(false);\n        const onCancel = React.useCallback(() => {\n          setVisibility(false);\n        }, []);\n        const onOk = React.useCallback(() => {\n          setLoading(true);\n          setTimeout(() => {\n            setVisibility(false);\n            setLoading(false);\n          }, 3000);\n        }, []);\n        return <div>\n        <Button onClick={() => setVisibility(true)} mdxType=\"Button\">\n          Open Modal with Async Logic\n        </Button>\n        <Modal title={'Title'} onOk={onOk} onCancel={onCancel} closable={!loading} allowKeyboard={!loading} cancelButtonProps={{\n            disabled: loading\n          }} okButtonProps={{\n            loading\n          }} visible={visible} mdxType=\"Modal\">\n          <div style={{\n              minHeight: \"200px\"\n            }}>\n            <Input label={'First Name'} mdxType=\"Input\" />\n            <Input label={'Last Name'} mdxType=\"Input\" />\n            <Input label={'Email'} mdxType=\"Input\" />\n            <Input label={'Password'} mdxType=\"Input\" />\n          </div>\n        </Modal>\n      </div>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"modal-props\"\n    }}>{`Modal Props`}</h2>\n    <Props of={Modal} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}