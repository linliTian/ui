{"version":3,"sources":["webpack:///../src/components/toggle/docz/Toggle.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","__position","__code","__scope","Playground","Props","Toggle","Container","Spacer","Button","ThemeContainer","React","isOn","setIsOn","handleClick","onClick","isLoading","setLoading","setTimeout","handleClickOn","handleClickOff","parentName","disabled","of","isMDXComponent"],"mappings":"oTAaaA,G,UAAe,S,uNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,YAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,iBAAQ,CACN,GAAM,UADR,UAGA,iBAAQ,CACN,GAAM,UADR,UAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,4QAA6QC,SAAO,GACrTJ,QACAH,kBACAQ,eACAC,UACAC,WACAC,cACAC,WACAC,WACAC,oBATqT,gBAUrTd,IAVqT,EAWrTH,eAXqT,GAYpTO,QAAQ,eACR,WAAM,MACmBW,YAAe,GAAhCC,EADF,KACQC,EADR,KAECC,EAAcH,eAAkB,WACpCE,GAASD,KACR,CAACC,EAASD,IACb,OAAO,YAAC,IAAD,CAAgBZ,QAAQ,kBAAiB,YAAC,IAAD,CAAQe,QAASD,EAAaF,KAAMA,EAAMZ,QAAQ,eAGtG,iBAAQ,CACN,GAAM,aADR,aAGA,0KACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,4bAA6bC,SAAO,GACreJ,QACAH,kBACAQ,eACAC,UACAC,WACAC,cACAC,WACAC,WACAC,oBATqe,gBAUred,IAVqe,EAWreH,eAXqe,GAYpeO,QAAQ,eACR,WAAM,MAC2BW,YAAe,GAAxCK,EADF,KACaC,EADb,OAEmBN,YAAe,GAAhCC,EAFF,KAEQC,EAFR,KAGCC,EAAcH,eAAkB,WACpCE,GAASD,GACTK,GAAW,GACXC,YAAW,WACTD,GAAW,KACV,OACF,CAACJ,EAASD,EAAMK,IACnB,OAAO,YAAC,IAAD,CAAgBjB,QAAQ,kBAAiB,YAAC,IAAD,CAAQe,QAASD,EAAaE,UAAWA,EAAWJ,KAAMA,EAAMZ,QAAQ,eAG5H,iBAAQ,CACN,GAAM,QADR,QAGA,oDACA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,glBAAilBC,SAAO,GACznBJ,QACAH,kBACAQ,eACAC,UACAC,WACAC,cACAC,WACAC,WACAC,oBATynB,gBAUznBd,IAVynB,EAWznBH,eAXynB,GAYxnBO,QAAQ,eACR,WAAM,MACmBW,YAAe,GAAhCC,EADF,KACQC,EADR,KAECM,EAAgBR,eAAkB,kBAAME,GAAQ,KAAO,CAACA,IACxDO,EAAiBT,eAAkB,kBAAME,GAAQ,KAAQ,CAACA,IAChE,OAAO,YAAC,IAAD,CAAgBb,QAAQ,kBACjC,YAAC,WAAD,KACE,YAAC,IAAD,CAAWA,QAAQ,aACjB,YAAC,IAAD,CAAQe,QAASK,EAAgBpB,QAAQ,UAAzC,cACA,YAAC,IAAD,CAAQA,QAAQ,WAChB,YAAC,IAAD,CAAQe,QAASI,EAAenB,QAAQ,UAAxC,cAEF,YAAC,IAAD,CAAWA,QAAQ,aACjB,YAAC,IAAD,CAAQY,KAAMA,EAAMZ,QAAQ,iBAMlC,iBAAQ,CACN,GAAM,YADR,YAGA,2FAA0E,0BAAYqB,WAAW,KAAvB,YAA1E,YAA2I,0BAAYA,WAAW,KAAvB,QAA3I,KACA,YAAC,IAAD,CAAYpB,WAAY,EAAGC,OAAQ,6DAA8DC,SAAO,GACtGJ,QACAH,kBACAQ,eACAC,UACAC,WACAC,cACAC,WACAC,WACAC,oBATsG,gBAUtGd,IAVsG,EAWtGH,eAXsG,GAYrGO,QAAQ,cACb,YAAC,IAAD,CAAgBA,QAAQ,kBACtB,YAAC,IAAD,CAAQsB,UAAQ,EAACtB,QAAQ,aAGzB,iBAAQ,CACN,GAAM,gBADR,gBAGA,YAAC,IAAD,CAAOuB,GAAIjB,IAAQN,QAAQ,gB,qNAK/BH,EAAW2B,gBAAiB","file":"component---src-components-toggle-docz-toggle-mdx-f3a1c0f534368235c5f5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/linli.tian/awn/ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { Toggle } from '../Toggle';\nimport { Container, Spacer } from './Toggle.docz';\nimport { Button } from '../../button/Button';\nimport { ThemeContainer } from '../../../../docz/components';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"toggle\"\n    }}>{`Toggle`}</h1>\n    <h2 {...{\n      \"id\": \"simple\"\n    }}>{`Simple`}</h2>\n    <Playground __position={0} __code={'() => {\\n  const [isOn, setIsOn] = React.useState(false)\\n  const handleClick = React.useCallback(() => {\\n    setIsOn(!isOn)\\n  }, [setIsOn, isOn])\\n  return (\\n    <ThemeContainer>\\n      <Toggle onClick={handleClick} isOn={isOn} />\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      Container,\n      Spacer,\n      Button,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [isOn, setIsOn] = React.useState(false);\n        const handleClick = React.useCallback(() => {\n          setIsOn(!isOn);\n        }, [setIsOn, isOn]);\n        return <ThemeContainer mdxType=\"ThemeContainer\"><Toggle onClick={handleClick} isOn={isOn} mdxType=\"Toggle\" /></ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"isloading\"\n    }}>{`isLoading`}</h2>\n    <p>{`If there is an asyncronous action occuring as a result of turning on or off the toggle. Provide the user feedback by showing a loading indicator.`}</p>\n    <Playground __position={1} __code={'() => {\\n  const [isLoading, setLoading] = React.useState(false)\\n  const [isOn, setIsOn] = React.useState(false)\\n  const handleClick = React.useCallback(() => {\\n    setIsOn(!isOn)\\n    setLoading(true)\\n    setTimeout(() => {\\n      setLoading(false)\\n    }, 2000)\\n  }, [setIsOn, isOn, setLoading])\\n  return (\\n    <ThemeContainer>\\n      <Toggle onClick={handleClick} isLoading={isLoading} isOn={isOn} />\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      Container,\n      Spacer,\n      Button,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [isLoading, setLoading] = React.useState(false);\n        const [isOn, setIsOn] = React.useState(false);\n        const handleClick = React.useCallback(() => {\n          setIsOn(!isOn);\n          setLoading(true);\n          setTimeout(() => {\n            setLoading(false);\n          }, 2000);\n        }, [setIsOn, isOn, setLoading]);\n        return <ThemeContainer mdxType=\"ThemeContainer\"><Toggle onClick={handleClick} isLoading={isLoading} isOn={isOn} mdxType=\"Toggle\" /></ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"ison\"\n    }}>{`isOn`}</h2>\n    <p>{`Control the toggle setting.`}</p>\n    <Playground __position={2} __code={'() => {\\n  const [isOn, setIsOn] = React.useState(true)\\n  const handleClickOn = React.useCallback(() => setIsOn(true), [setIsOn])\\n  const handleClickOff = React.useCallback(() => setIsOn(false), [setIsOn])\\n  return (\\n    <ThemeContainer>\\n      <React.Fragment>\\n        <Container>\\n          <Button onClick={handleClickOff}>Toggle Off</Button>\\n          <Spacer />\\n          <Button onClick={handleClickOn}>Toggle On</Button>\\n        </Container>\\n        <Container>\\n          <Toggle isOn={isOn} />\\n        </Container>\\n      </React.Fragment>\\n    </ThemeContainer>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      Container,\n      Spacer,\n      Button,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [isOn, setIsOn] = React.useState(true);\n        const handleClickOn = React.useCallback(() => setIsOn(true), [setIsOn]);\n        const handleClickOff = React.useCallback(() => setIsOn(false), [setIsOn]);\n        return <ThemeContainer mdxType=\"ThemeContainer\">\n      <React.Fragment>\n        <Container mdxType=\"Container\">\n          <Button onClick={handleClickOff} mdxType=\"Button\">Toggle Off</Button>\n          <Spacer mdxType=\"Spacer\" />\n          <Button onClick={handleClickOn} mdxType=\"Button\">Toggle On</Button>\n        </Container>\n        <Container mdxType=\"Container\">\n          <Toggle isOn={isOn} mdxType=\"Toggle\" />\n        </Container>\n      </React.Fragment>\n    </ThemeContainer>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"disabled\"\n    }}>{`Disabled`}</h2>\n    <p>{`Disable a users ability to interact with the toggle by setting the `}<inlineCode parentName=\"p\">{`disabled`}</inlineCode>{` prop to `}<inlineCode parentName=\"p\">{`true`}</inlineCode>{`.`}</p>\n    <Playground __position={3} __code={'<ThemeContainer>\\n  <Toggle disabled />\\n</ThemeContainer>'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      Toggle,\n      Container,\n      Spacer,\n      Button,\n      ThemeContainer,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  <ThemeContainer mdxType=\"ThemeContainer\">\n    <Toggle disabled mdxType=\"Toggle\" /> \n  </ThemeContainer>\n    </Playground>\n    <h2 {...{\n      \"id\": \"toggle-props\"\n    }}>{`Toggle Props`}</h2>\n    <Props of={Toggle} mdxType=\"Props\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}